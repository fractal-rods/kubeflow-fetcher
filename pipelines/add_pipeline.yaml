apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: addition-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.1, pipelines.kubeflow.org/pipeline_compilation_time: '2023-07-13T16:23:54.613833',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "An example pipeline that
      performs addition calculations.", "inputs": [{"default": "5", "name": "a", "optional":
      true}, {"default": "7", "name": "b", "optional": true}], "name": "Addition pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.1}
spec:
  entrypoint: addition-pipeline
  templates:
  - name: add
    container:
      args: [--a, '{{inputs.parameters.a}}', --b, '{{inputs.parameters.b}}', '----output-paths',
        /tmp/outputs/Output/data]
      command:
      - sh
      - -ec
      - |
        program_path=$(mktemp)
        printf "%s" "$0" > "$program_path"
        python3 -u "$program_path" "$@"
      - |
        def add(a, b):
          '''Calculates sum of two arguments'''
          return a + b

        def _serialize_float(float_value: float) -> str:
            if isinstance(float_value, str):
                return float_value
            if not isinstance(float_value, (float, int)):
                raise TypeError('Value "{}" has type "{}" instead of float.'.format(
                    str(float_value), str(type(float_value))))
            return str(float_value)

        import argparse
        _parser = argparse.ArgumentParser(prog='Add', description='Calculates sum of two arguments')
        _parser.add_argument("--a", dest="a", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("--b", dest="b", type=float, required=True, default=argparse.SUPPRESS)
        _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
        _parsed_args = vars(_parser.parse_args())
        _output_files = _parsed_args.pop("_output_paths", [])

        _outputs = add(**_parsed_args)

        _outputs = [_outputs]

        _output_serializers = [
            _serialize_float,

        ]

        import os
        for idx, output_file in enumerate(_output_files):
            try:
                os.makedirs(os.path.dirname(output_file))
            except OSError:
                pass
            with open(output_file, 'w') as f:
                f.write(_output_serializers[idx](_outputs[idx]))
      image: python:3.7
    inputs:
      parameters:
      - {name: a}
      - {name: b}
    outputs:
      artifacts:
      - {name: add-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.1
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Calculates
          sum of two arguments", "implementation": {"container": {"args": ["--a",
          {"inputValue": "a"}, "--b", {"inputValue": "b"}, "----output-paths", {"outputPath":
          "Output"}], "command": ["sh", "-ec", "program_path=$(mktemp)\nprintf \"%s\"
          \"$0\" > \"$program_path\"\npython3 -u \"$program_path\" \"$@\"\n", "def
          add(a, b):\n  ''''''Calculates sum of two arguments''''''\n  return a +
          b\n\ndef _serialize_float(float_value: float) -> str:\n    if isinstance(float_value,
          str):\n        return float_value\n    if not isinstance(float_value, (float,
          int)):\n        raise TypeError(''Value \"{}\" has type \"{}\" instead of
          float.''.format(\n            str(float_value), str(type(float_value))))\n    return
          str(float_value)\n\nimport argparse\n_parser = argparse.ArgumentParser(prog=''Add'',
          description=''Calculates sum of two arguments'')\n_parser.add_argument(\"--a\",
          dest=\"a\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--b\",
          dest=\"b\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\",
          dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files
          = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = add(**_parsed_args)\n\n_outputs
          = [_outputs]\n\n_output_serializers = [\n    _serialize_float,\n\n]\n\nimport
          os\nfor idx, output_file in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n    except
          OSError:\n        pass\n    with open(output_file, ''w'') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"],
          "image": "python:3.7"}}, "inputs": [{"name": "a", "type": "Float"}, {"name":
          "b", "type": "Float"}], "name": "Add", "outputs": [{"name": "Output", "type":
          "Float"}]}', pipelines.kubeflow.org/component_ref: '{"digest": "0f130097d12cb1f0030165d73fb04c836631ee7566092f2409d2a64909410b9d",
          "url": "components/add_component.yaml"}', pipelines.kubeflow.org/arguments.parameters: '{"a":
          "{{inputs.parameters.a}}", "b": "{{inputs.parameters.b}}"}'}
  - name: addition-pipeline
    inputs:
      parameters:
      - {name: a}
      - {name: b}
    dag:
      tasks:
      - name: add
        template: add
        arguments:
          parameters:
          - {name: a, value: '{{inputs.parameters.a}}'}
          - {name: b, value: '{{inputs.parameters.b}}'}
  arguments:
    parameters:
    - {name: a, value: '5'}
    - {name: b, value: '7'}
  serviceAccountName: pipeline-runner
